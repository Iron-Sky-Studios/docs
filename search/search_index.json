{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#wip","title":"WIP","text":""},{"location":"notes/csharp/","title":"C# Notes","text":""},{"location":"notes/csharp/#basic-code-structure","title":"Basic Code Structure","text":"Basic SkeletonSample Code <pre><code>using &lt;Namespace.Class.Method&gt;;\n...\nnamespace &lt;Namespace&gt;\n{\n&lt;access_modifier&gt; class &lt;Class&gt;\n{\n&lt;access_modifier&gt; &lt;return_type&gt; &lt;Method&gt;(&lt;type&gt; param)\n{\n...\n}\n}\n}\n</code></pre> <pre><code>using System;\nnamespace Greeting\n{\nclass Program\n{\nstatic void Main(string[] args)\n{\nConsole.WriteLine(\"Hello World\");\n}\n}\n}\n</code></pre>"},{"location":"notes/csharp/#basic-data-types","title":"Basic Data Types","text":"<pre><code>string characterName = \"Zelda\";  // strings in double quotes\nchar characterRank = 'A';        // char in single quote\nint characterAge = 100;\nbool isMale = false;             // small caps true/false\n// to represent decimal numbers:\nfloat                            // least precise\ndouble\ndecimal                          // most precise (1)\n</code></pre> <ol> <li>usually used for storing stuff like money, etc.</li> </ol>"},{"location":"notes/csharp/#strings","title":"Strings","text":""},{"location":"notes/csharp/#literal-strings","title":"Literal Strings","text":"<pre><code>string literalStr = \"\\nThis will print a new line\";\n</code></pre>"},{"location":"notes/csharp/#verbatim-strings","title":"Verbatim Strings","text":"<p>Mostly used to use unescaped sequences in one line.</p> <pre><code>string verbatimStr = @\"\\nThis will not print new line\";\nstring winPath = @\"C:\\Users\\path\\to\\file\";\nstring linkTag = @\"&lt;link rel=\"\"stylesheet\"\" src=\"\"path/to/css\"\"&gt;\";\n</code></pre>"},{"location":"notes/csharp/#raw-strings","title":"Raw Strings","text":"<p>Multi-line use of unescaped escape sequences.</p> <pre><code>string rawStr = \"\"\"\nThis is a raw string.\nLines cannot out-indent // (1)!\nthe delimeter\n\"\"\";                       // notice that the delimeter \"\"\" is it's own line\n// raw strings are best used for representing json/xml/html\n// example usage using Bogus library (C# port of faker.js)\nstring jsonStr = $\"\"\"\n[\n    {\n      \"id\": 1,\n      \"first_name\": {faker.Name.FirstName()},\n      \"last_name\": {faker.Name.LastName()},\n      \"email\": {faker.Internet.Email()},\n      \"mobile_number\": {faker.Phone.PhoneNumber()}\n    }\n  ]\n\"\"\";\n</code></pre> <ol> <li>out-indenting delimeter is invalid raw string:     <pre><code>string rawString=\"\"\"\nThis raw string will throw an error\n\"\"\";\n</code></pre></li> </ol>"},{"location":"notes/csharp/#props-and-methods","title":"Props and Methods","text":"<pre><code>// for list of available string props and methods\n// see: https://learn.microsoft.com/en-us/dotnet/api/system.string?#properties\nstring phrase = \"hello\";\nphrase.Length;           // returns string length\nphrase.Contains(\"El\");   // returns bool (case-sensitive)\n// some more examples: ToLower(), ToUpper(), IndexOf(&lt;char&gt;),\n// Substring(&lt;int: start_index&gt;, &lt;Optional[int]: substring_length&gt;)\n</code></pre>"},{"location":"notes/csharp/#string-interpolation","title":"String Interpolation","text":"<pre><code>(string firstName, string lastName) profile = (firstName: \"John\", lastName: \"Doe\");\nstring fullName = $\"{profile.firstName} {profile.lastName}\";\nfullName = $@\"C:\\Users\\{profile.firstName}\\path\\to\\file\";  // can also be @$\n(int X, int Y) coord = (X: 2, Y: 3);\nstring coordMessage = $$\"\"\"Coordinate is {{{coordiate.X}}, {{coordinate.Y}}}\"\"\"; // (1)!\n</code></pre> <ol> <li>on raw strings, the number of <code>$</code> specify the number of <code>{</code> <code>}</code> to start and end interpolation</li> </ol>"},{"location":"notes/csharp/#format-string","title":"Format String","text":"<pre><code>DateTime currentDateTime = DateTime.Now;\nConsole.WriteLine(currentDateTime.ToString(\"yyyy-MM-dd\"));\n</code></pre>"},{"location":"notes/csharp/#chars","title":"Chars","text":"<pre><code>char[] helloChars = { 'h', 'e', 'l', 'l', 'o' };\n// friendly reminder that string is just an array of chars\nstring helloStr = new string(helloChars);\n// create a string with char repeated x times\nstring repeatedChar = new string('c', 20);\n</code></pre>"},{"location":"notes/csharp/#props-and-methods_1","title":"Props and Methods","text":"<pre><code>// for list of available char props and methods\n// see: https://learn.microsoft.com/en-us/dotnet/api/system.char?#fields\nchar firstCharInPhrase = phrase[0];\nConsole.WriteLine(Char.IsLower(firstCharInPhrase)); // (1)!\n</code></pre> <ol> <li>as to why we can't just do <code>firstCharInPhrase.IsLower()</code>, don't ask me why</li> </ol>"},{"location":"notes/csharp/#string-builder","title":"String Builder","text":"<pre><code>// if in need of performance\n// see: System.Text.StringBuilder\n</code></pre>"},{"location":"notes/typescript/","title":"TypeScript Notes","text":""},{"location":"notes/typescript/#basic-types","title":"Basic Types","text":""},{"location":"notes/typescript/#primitives","title":"Primitives","text":"<pre><code>let userName: string = \"Jack\";\nlet hasLoggedIn: boolean = true;\nlet myNumber: number = 10;\n</code></pre>"},{"location":"notes/typescript/#arrays","title":"Arrays","text":"<pre><code>const names: string[] = userName.split(\" \");\nconst myValues: Array&lt;number&gt; = [1, 2, 3];\n</code></pre>"},{"location":"notes/typescript/#regex","title":"Regex","text":"<pre><code>let myRegex: RegExp = /foo/;\n</code></pre>"},{"location":"notes/typescript/#interfaces","title":"Interfaces","text":"<pre><code>interface Person {\nfirst: string;\nlast: string;\n}\nconst myPerson: Person = {\nfirst: \"Jack\",\nlast: \"Herring\",\n}\n</code></pre>"},{"location":"notes/typescript/#utilities","title":"Utilities","text":"<pre><code>cons ids: Record&lt;number, string&gt; = {\n10: \"a\",\n20: \"b\",\n}\nids[30] = \"c\";\n</code></pre>"},{"location":"onboarding/1-git-starter-pack/","title":"Git Starter Pack","text":"<p>This starter pack covers fundamental commands for version control.</p>"},{"location":"onboarding/1-git-starter-pack/#cloning-a-repo","title":"Cloning a Repo","text":"<p>Create a copy of a remote repository onto your local machine.</p> <pre><code>git clone &lt;repo_name&gt;\n</code></pre>"},{"location":"onboarding/1-git-starter-pack/#adding-changes","title":"Adding changes","text":"<p>Add modified files to the staging area and prepare them for a commit.</p>"},{"location":"onboarding/1-git-starter-pack/#adding-selected-filesdirectories","title":"Adding selected files/directories","text":"<p>Stage only chosen modifications for the next commit.</p> <pre><code>git add &lt;file_1&gt; &lt;file_2&gt; &lt;dir_1&gt; ...\n</code></pre>"},{"location":"onboarding/1-git-starter-pack/#adding-all-changes-made","title":"Adding all changes made","text":"<p>Stage all modifications across the entire working directory for the upcoming commit.</p> <pre><code>git add .\n</code></pre>"},{"location":"onboarding/1-git-starter-pack/#committing-the-changes-made","title":"Committing the changes made","text":"<p>Create a snapshot of the staged changes along with a descriptive message, recording a new point in the project's history.</p> <pre><code>git commit -m \"&lt;message&gt;\"\n</code></pre>"},{"location":"onboarding/1-git-starter-pack/#descriptive-commit-message","title":"Descriptive commit message","text":"<p>A descriptive commit message provides clear context and history, aiding collaboration and future reference for understanding the purpose and impact of the committed changes.</p> <pre><code>feat: &lt;message&gt;          # adding/deleting feature changes\nbugfix: &lt;message&gt;        # fixing bugs\nchore: &lt;message&gt;         # any changes not feat/bugfix\ndocs: &lt;message&gt;          # improve documentation\n</code></pre>"},{"location":"onboarding/1-git-starter-pack/#pushing-changes-from-local-to-remote","title":"Pushing changes from local to remote","text":"<p>Transmit your local commits and changes to a shared repository, enabling collaboration and synchronization with other team members.</p> <pre><code>git push\n</code></pre>"},{"location":"onboarding/1-git-starter-pack/#pulling-changes-from-remote-to-local","title":"Pulling changes from remote to local","text":"<p>Fetch and integrate the latest updates from the shared repository into your local codebase.</p> <pre><code>git pull\n</code></pre>"},{"location":"onboarding/2-git-collab-starter-pack/","title":"Git Collab Starter Pack","text":"<p>This starter pack encompasses creating issues, developing on separate branches, initiating pull requests, and undergoing code reviews to facilitate organized and collaborative software development.</p>"},{"location":"onboarding/2-git-collab-starter-pack/#branch-protection","title":"Branch Protection","text":"<p>Enforcing branch protection on <code>main</code> branch enhances code stability and security by preventing accidental deletions and unauthorized direct pushes, ensuring that changes undergo proper code review and testing processes through pull requests.</p>"},{"location":"onboarding/2-git-collab-starter-pack/#creatingchoosing-an-issue","title":"Creating/Choosing an Issue","text":"<p>Identify a task, bug, or enhancement, then either creating a new issue or selecting an existing one to track and discuss specific development objectives within a repository.</p> Issue TemplateSample Issue <pre><code>&lt;TICKET_NAME-TICKET_NUMBER&gt; &lt;SCOPE&gt; &lt;TICKET_DESCRIPTION&gt;\n\n- &lt;TICKET_DETAILS&gt;...\n</code></pre> <pre><code>Platformer-123 Gameplay Improvements\n\n- Ticket Details:\nImplement various gameplay enhancements to improve player experience.\n\n- Scope:\nGameplay mechanics, player movement, enemy behavior, collision detection.\n\n- Expected Changes:\n- Improve player movement responsiveness.\n- Add double jump mechanic for better platforming.\n- Adjust enemy AI behavior for more engaging challenges.\n- Refactor collision detection to reduce glitches.\n</code></pre> <p>Note</p> <p>To mitigate merge conflicts, each issue will be assigned to a maximum of one developer in order to maintain clear ownership and minimize overlapping changes.</p>"},{"location":"onboarding/2-git-collab-starter-pack/#creating-a-new-branch","title":"Creating a new branch","text":"<p>Making a copy of the current state of a repository to work on separate changes without affecting the main codebase.</p> <pre><code>git checkout -b &lt;branch_name&gt;\n</code></pre>"},{"location":"onboarding/2-git-collab-starter-pack/#branch-naming-convention","title":"Branch Naming Convention","text":"With Ticket NumberExample <pre><code>&lt;TICKET_TYPE&gt;/&lt;TICKET_NAME-TICKET_NUMBER&gt;\n</code></pre> <pre><code>feat/PLAYER-256\ndocs/README-1\n</code></pre> With Ticket DescriptionExample <pre><code>&lt;TICKET_TYPE&gt;/&lt;TICKET_DESCRIPTION&gt;\n</code></pre> <pre><code>bugfix/misconfigured-lint-workflow\ndocs/add-locale-translations\n</code></pre>"},{"location":"onboarding/2-git-collab-starter-pack/#working-on-the-local-branch","title":"Working on the local branch","text":"<p>Make changes to files within the branch, separate from the main codebase, allowing for isolated development.</p>"},{"location":"onboarding/2-git-collab-starter-pack/#pushing-from-local-to-remote","title":"Pushing from local to remote","text":"<p>Update the remote branch with your local changes, facilitating collaboration and sharing of development progress.</p> Origin NOT SETOrigin already set <pre><code>git push -u origin &lt;branch_name&gt;\n</code></pre> <pre><code>git push\n</code></pre>"},{"location":"onboarding/2-git-collab-starter-pack/#creating-a-pull-request","title":"Creating a Pull Request","text":"<p>A pull request is a formalized way to propose and discuss changes made in a branch, enabling collaboration and code review before merging those changes into the main branch.</p> PR TemplateSample PR <pre><code>&lt;TICKET_NAME-TICKET_NUMBER&gt; &lt;SCOPE&gt; &lt;TICKET_DESCRIPTION&gt;\n\nTicket Link: &lt;link_to_ticket&gt;\nDescription: &lt;verbose_description&gt;\n\nChanges made:\n- &lt;changelog_1&gt;\n- &lt;changelog_2&gt;\n- ...\n\nExpected Behaviour:\n- expected behaviour after adding changes\n\nTest steps:\n- detail the steps to do to achieve or replicate expected behaviour\nfrom another dev's or collaborator's machine\n\n(Optional)\nBefore\n&lt;screenshot_or_gif_before_the_change&gt;\n\nAfter\n&lt;screenshot_or_gif_after_the_change&gt;\n</code></pre> <pre><code>Platformer-123 Gameplay Improvements\n\nTicket Link: [#123](https://example.com/tickets/123)\nDescription: Implement various gameplay enhancements to improve player experience.\n\nChanges made:\n- Improved player movement responsiveness.\n- Added double jump mechanic for better platforming.\n- Adjusted enemy AI behavior for more engaging challenges.\n- Refactored collision detection to reduce glitches.\n\nExpected Behavior:\n- Players will experience smoother and more responsive character control.\n- The game's difficulty will be balanced due to the addition of double jump.\n- Enemies will present a more dynamic and engaging threat with AI adjustments.\n- Players will encounter fewer collision-related bugs and issues.\n\nTest Steps:\n1. Launch the game.\n2. Play through different levels using various characters.\n3. Attempt different platforming maneuvers, including double jumps.\n4. Observe enemy behavior changes in different scenarios.\n5. Pay attention to collision interactions with the environment.\n\nBefore\n![Before Changes](link_to_before_screenshot_or_gif)\n\nAfter\n![After Changes](link_to_after_screenshot_or_gif)\n</code></pre>"},{"location":"onboarding/2-git-collab-starter-pack/#code-review","title":"Code Review","text":"<p>Code review is a collaborative process where changes made in a branch are systematically evaluated by peers to ensure quality, identify errors, and provide feedback before merging.</p>"},{"location":"onboarding/2-git-collab-starter-pack/#pull-request-approval","title":"Pull Request Approval","text":"<p>If changes are approved, merge the PR, then and only then, will the changes reflect to the <code>main</code> branch</p>"},{"location":"onboarding/2-git-collab-starter-pack/#update-changes-from-remote","title":"Update changes from remote","text":"<p>Switch back to main and pull latest changes made by other devs.</p> <pre><code>git checkout main\ngit pull\n</code></pre>"},{"location":"onboarding/3-csharp-google-styleguide/","title":"C# at Google Style Guide","text":"<p>This style guide is for C# code developed internally at Google, and is the default style for C# code at Google. It makes stylistic choices that conform to other languages at Google, such as Google C++ style and Google Java style.</p>"},{"location":"onboarding/3-csharp-google-styleguide/#formatting-guidelines","title":"Formatting guidelines","text":""},{"location":"onboarding/3-csharp-google-styleguide/#naming-rules","title":"Naming rules","text":"<p>Naming rules follow Microsoft's C# naming guidelines. Where Microsoft's naming guidelines are unspecified (e.g. private and local variables), rules are taken from the CoreFX C# coding guidelines</p> <p>Rule summary:</p>"},{"location":"onboarding/3-csharp-google-styleguide/#code","title":"Code","text":"<ul> <li>Names of classes, methods, enumerations, public fields, public properties,     namespaces: <code>PascalCase</code>.</li> <li>Names of local variables, parameters: <code>camelCase</code>.</li> <li>Names of private, protected, internal and protected internal fields and     properties: <code>_camelCase</code>.</li> <li>Naming convention is unaffected by modifiers such as const, static,     readonly, etc.</li> <li>For casing, a \"word\" is anything written without internal spaces, including     acronyms. For example, <code>MyRpc</code> instead of ~~<code>MyRPC</code>~~.</li> <li>Names of interfaces start with <code>I</code>, e.g. <code>IInterface</code>.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#files","title":"Files","text":"<ul> <li>Filenames and directory names are <code>PascalCase</code>, e.g. <code>MyFile.cs</code>.</li> <li>Where possible the file name should be the same as the name of the main     class in the file, e.g. <code>MyClass.cs</code>.</li> <li>In general, prefer one core class per file.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#organization","title":"Organization","text":"<ul> <li>Modifiers occur in the following order: <code>public protected internal private     new abstract virtual override sealed static readonly extern unsafe volatile     async</code>.</li> <li>Namespace <code>using</code> declarations go at the top, before any namespaces. <code>using</code>     import order is alphabetical, apart from <code>System</code> imports which always go     first.</li> <li>Class member ordering:<ul> <li>Group class members in the following order:<ul> <li>Nested classes, enums, delegates and events.</li> <li>Static, const and readonly fields.</li> <li>Fields and properties.</li> <li>Constructors and finalizers.</li> <li>Methods.</li> </ul> </li> <li>Within each group, elements should be in the following order:<ul> <li>Public.</li> <li>Internal.</li> <li>Protected internal.</li> <li>Protected.</li> <li>Private.</li> </ul> </li> <li>Where possible, group interface implementations together.</li> </ul> </li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#whitespace-rules","title":"Whitespace rules","text":"<p>Developed from Google Java style.</p> <ul> <li>A maximum of one statement per line.</li> <li>A maximum of one assignment per statement.</li> <li>Indentation of 2 spaces, no tabs.</li> <li>Column limit: 100.</li> <li>No line break before opening brace.</li> <li>No line break between closing brace and <code>else</code>.</li> <li>Braces used even when optional.</li> <li>Space after <code>if</code>/<code>for</code>/<code>while</code> etc., and after commas.</li> <li>No space after an opening parenthesis or before a closing parenthesis.</li> <li>No space between a unary operator and its operand. One space between the     operator and each operand of all other operators.</li> <li>Line wrapping developed from Google C++ style guidelines, with minor     modifications for compatibility with Microsoft's C# formatting tools:<ul> <li>In general, line continuations are indented 4 spaces.</li> <li>Line breaks with braces (e.g. list initializers, lambdas, object     initializers, etc) do not count as continuations.</li> <li>For function definitions and calls, if the arguments do not all fit on     one line they should be broken up onto multiple lines, with each     subsequent line aligned with the first argument. If there is not enough     room for this, arguments may instead be placed on subsequent lines with     a four space indent. The code example below illustrates this.</li> </ul> </li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#example","title":"Example","text":"<pre><code>using System;                                       // `using` goes at the top, outside the\n// namespace.\nnamespace MyNamespace {                             // Namespaces are PascalCase.\n// Indent after namespace.\npublic interface IMyInterface {                   // Interfaces start with 'I'\npublic int Calculate(float value, float exp);   // Methods are PascalCase\n// ...and space after comma.\n}\npublic enum MyEnum {                              // Enumerations are PascalCase.\nYes,                                            // Enumerators are PascalCase.\nNo,\n}\npublic class MyClass {                            // Classes are PascalCase.\npublic int Foo = 0;                             // Public member variables are\n// PascalCase.\npublic bool NoCounting = false;                 // Field initializers are encouraged.\nprivate class Results {\npublic int NumNegativeResults = 0;\npublic int NumPositiveResults = 0;\n}\nprivate Results _results;                       // Private member variables are\n// _camelCase.\npublic static int NumTimesCalled = 0;\nprivate const int _bar = 100;                   // const does not affect naming\n// convention.\nprivate int[] _someTable = {                    // Container initializers use a 2\n2, 3, 4,                                      // space indent.\n}\npublic MyClass() {\n_results = new Results {\nNumNegativeResults = 1,                     // Object initializers use a 2 space\nNumPositiveResults = 1,                     // indent.\n};\n}\npublic int CalculateValue(int mulNumber) {      // No line break before opening brace.\nvar resultValue = Foo * mulNumber;            // Local variables are camelCase.\nNumTimesCalled++;\nFoo += _bar;\nif (!NoCounting) {                            // No space after unary operator and\n// space after 'if'.\nif (resultValue &lt; 0) {                      // Braces used even when optional and\n// spaces around comparison operator.\n_results.NumNegativeResults++;\n} else if (resultValue &gt; 0) {               // No newline between brace and else.\n_results.NumPositiveResults++;\n}\n}\nreturn resultValue;\n}\npublic void ExpressionBodies() {\n// For simple lambdas, fit on one line if possible, no brackets or braces required.\nFunc&lt;int, int&gt; increment = x =&gt; x + 1;\n// Closing brace aligns with first character on line that includes the opening brace.\nFunc&lt;int, int, long&gt; difference1 = (x, y) =&gt; {\nlong diff = (long)x - y;\nreturn diff &gt;= 0 ? diff : -diff;\n};\n// If defining after a continuation line break, indent the whole body.\nFunc&lt;int, int, long&gt; difference2 =\n(x, y) =&gt; {\nlong diff = (long)x - y;\nreturn diff &gt;= 0 ? diff : -diff;\n};\n// Inline lambda arguments also follow these rules. Prefer a leading newline before\n// groups of arguments if they include lambdas.\nCallWithDelegate(\n(x, y) =&gt; {\nlong diff = (long)x - y;\nreturn diff &gt;= 0 ? diff : -diff;\n});\n}\nvoid DoNothing() {}                             // Empty blocks may be concise.\n// If possible, wrap arguments by aligning newlines with the first argument.\nvoid AVeryLongFunctionNameThatCausesLineWrappingProblems(int longArgumentName,\nint p1, int p2) {}\n// If aligning argument lines with the first argument doesn't fit, or is difficult to\n// read, wrap all arguments on new lines with a 4 space indent.\nvoid AnotherLongFunctionNameThatCausesLineWrappingProblems(\nint longArgumentName, int longArgumentName2, int longArgumentName3) {}\nvoid CallingLongFunctionName() {\nint veryLongArgumentName = 1234;\nint shortArg = 1;\n// If possible, wrap arguments by aligning newlines with the first argument.\nAnotherLongFunctionNameThatCausesLineWrappingProblems(shortArg, shortArg,\nveryLongArgumentName);\n// If aligning argument lines with the first argument doesn't fit, or is difficult to\n// read, wrap all arguments on new lines with a 4 space indent.\nAnotherLongFunctionNameThatCausesLineWrappingProblems(\nveryLongArgumentName, veryLongArgumentName, veryLongArgumentName);\n}\n}\n}\n</code></pre>"},{"location":"onboarding/3-csharp-google-styleguide/#c-coding-guidelines","title":"C# coding guidelines","text":""},{"location":"onboarding/3-csharp-google-styleguide/#constants","title":"Constants","text":"<ul> <li>Variables and fields that can be made <code>const</code> should always be made <code>const</code>.</li> <li>If <code>const</code> isn\u2019t possible, <code>readonly</code> can be a suitable alternative.</li> <li>Prefer named constants to magic numbers.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#ienumerable-vs-ilist-vs-ireadonlylist","title":"IEnumerable vs IList vs IReadOnlyList","text":"<ul> <li>For inputs use the most restrictive collection type possible, for example     <code>IReadOnlyCollection</code> / <code>IReadOnlyList</code> / <code>IEnumerable</code> as inputs to methods     when the inputs should be immutable.</li> <li>For outputs, if passing ownership of the returned container to the owner,     prefer <code>IList</code> over <code>IEnumerable</code>. If not transferring ownership, prefer the     most restrictive option.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#generators-vs-containers","title":"Generators vs containers","text":"<ul> <li>Use your best judgement, bearing in mind:<ul> <li>Generator code is often less readable than filling in a container.</li> <li>Generator code can be more performant if the results are going to be     processed lazily, e.g. when not all the results are needed.</li> <li>Generator code that is directly turned into a container via <code>ToList()</code>     will be less performant than filling in a container directly.</li> <li>Generator code that is called multiple times will be considerably slower     than iterating over a container multiple times.</li> </ul> </li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#property-styles","title":"Property styles","text":"<ul> <li>For single line read-only properties, prefer expression body properties     (<code>=&gt;</code>) when possible.</li> <li>For everything else, use the older <code>{ get; set; }</code> syntax.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#expression-body-syntax","title":"Expression body syntax","text":"<p>For example:</p> <pre><code>int SomeProperty =&gt; _someProperty\n</code></pre> <ul> <li>Judiciously use expression body syntax in lambdas and properties.</li> <li>Don\u2019t use on method definitions. This will be reviewed when C# 7 is live,     which uses this syntax heavily.</li> <li>As with methods and other scoped blocks of code, align the closing with the     first character of the line that includes the opening brace. See sample code     for examples.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#structs-and-classes","title":"Structs and classes:","text":"<ul> <li> <p>Structs are very different from classes:</p> <ul> <li>Structs are always passed and returned by value.</li> <li>Assigning a value to a member of a returned struct doesn\u2019t modify the     original - e.g. <code>transform.position.x = 10</code> doesn\u2019t set the transform\u2019s     position.x to 10; <code>position</code> here is a property that returns a <code>Vector3</code>     by value, so this just sets the x parameter of a copy of the original.</li> </ul> </li> <li> <p>Almost always use a class.</p> </li> <li> <p>Consider struct when the type can be treated like other value types - for     example, if instances of the type are small and commonly short-lived or are     commonly embedded in other objects. Good examples include Vector3,     Quaternion and Bounds.</p> </li> <li> <p>Note that this guidance may vary from team to team where, for example,     performance issues might force the use of structs.</p> </li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#lambdas-vs-named-methods","title":"Lambdas vs named methods","text":"<ul> <li>If a lambda is non-trivial (e.g. more than a couple of statements, excluding     declarations), or is reused in multiple places, it should probably be a     named method.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#field-initializers","title":"Field initializers","text":"<ul> <li>Field initializers are generally encouraged.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#extension-methods","title":"Extension methods","text":"<ul> <li>Only use an extension method when the source of the original class is not     available, or else when changing the source is not feasible.</li> <li>Only use an extension method if the functionality being added is a \u2018core\u2019     general feature that would be appropriate to add to the source of the     original class.<ul> <li>Note - if we have the source to the class being extended, and the     maintainer of the original class does not want to add the function,     prefer not using an extension method.</li> </ul> </li> <li>Only put extension methods into core libraries that are available     everywhere - extensions that are only available in some code will become a     readability issue.</li> <li>Be aware that using extension methods always obfuscates the code, so err on     the side of not adding them.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#ref-and-out","title":"ref and out","text":"<ul> <li>Use <code>out</code> for returns that are not also inputs.</li> <li>Place <code>out</code> parameters after all other parameters in the method definition.</li> <li><code>ref</code> should be used rarely, when mutating an input is necessary.</li> <li>Do not use <code>ref</code> as an optimisation for passing structs.</li> <li>Do not use <code>ref</code> to pass a modifiable container into a method. <code>ref</code> is only     required when the supplied container needs be replaced with an entirely     different container instance.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#linq","title":"LINQ","text":"<ul> <li>In general, prefer single line LINQ calls and imperative code, rather than     long chains of LINQ. Mixing imperative code and heavily chained LINQ is     often hard to read.</li> <li>Prefer member extension methods over SQL-style LINQ keywords - e.g. prefer     <code>myList.Where(x)</code> to <code>myList where x</code>.</li> <li>Avoid <code>Container.ForEach(...)</code> for anything longer than a single statement.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#array-vs-list","title":"Array vs List","text":"<ul> <li>In general, prefer <code>List&lt;&gt;</code> over arrays for public variables, properties,     and return types (keeping in mind the guidance on <code>IList</code> / <code>IEnumerable</code> /     <code>IReadOnlyList</code> above).</li> <li>Prefer <code>List&lt;&gt;</code> when the size of the container can change.</li> <li>Prefer arrays when the size of the container is fixed and known at     construction time.</li> <li>Prefer array for multidimensional arrays.</li> <li>Note:<ul> <li>array and <code>List&lt;&gt;</code> both represent linear, contiguous containers.</li> <li>Similar to C++ arrays vs <code>std::vector</code>, arrays are of fixed capacity,     whereas <code>List&lt;&gt;</code> can be added to.</li> <li>In some cases arrays are more performant, but in general <code>List&lt;&gt;</code> is     more flexible.</li> </ul> </li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#folders-and-file-locations","title":"Folders and file locations","text":"<ul> <li>Be consistent with the project.</li> <li>Prefer a flat structure where possible.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#use-of-tuple-as-a-return-type","title":"Use of tuple as a return type","text":"<ul> <li>In general, prefer a named class type over <code>Tuple&lt;&gt;</code>, particularly when     returning complex types.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#string-interpolation-vs-stringformat-vs-stringconcat-vs-operator","title":"String interpolation vs <code>String.Format()</code> vs <code>String.Concat</code> vs <code>operator+</code>","text":"<ul> <li>In general, use whatever is easiest to read, particularly for logging and     assert messages.</li> <li>Be aware that chained <code>operator+</code> concatenations will be slower and cause     significant memory churn.</li> <li>If performance is a concern, <code>StringBuilder</code> will be faster for multiple     string concatenations.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#using","title":"<code>using</code>","text":"<ul> <li>Generally, don\u2019t alias long typenames with <code>using</code>. Often this is a sign     that a <code>Tuple&lt;&gt;</code> needs to be turned into a class.<ul> <li>e.g. <code>using RecordList = List&lt;Tuple&lt;int, float&gt;&gt;</code> should probably be a     named class instead.</li> </ul> </li> <li>Be aware that <code>using</code> statements are only file scoped and so of limited use.     Type aliases will not be available for external users.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#object-initializer-syntax","title":"Object Initializer syntax","text":"<p>For example:</p> <pre><code>var x = new SomeClass {\nProperty1 = value1,\nProperty2 = value2,\n};\n</code></pre> <ul> <li>Object Initializer Syntax is fine for \u2018plain old data\u2019 types.</li> <li>Avoid using this syntax for classes or structs with constructors.</li> <li>If splitting across multiple lines, indent one block level.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#namespace-naming","title":"Namespace naming","text":"<ul> <li>In general, namespaces should be no more than 2 levels deep.</li> <li>Don't force file/folder layout to match namespaces.</li> <li>For shared library/module code, use namespaces. For leaf 'application' code,     such as <code>unity_app</code>, namespaces are not necessary.</li> <li>New top-level namespace names must be globally unique and recognizable.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#default-valuesnull-returns-for-structs","title":"Default values/null returns for structs","text":"<ul> <li>Prefer returning a \u2018success\u2019 boolean value and a struct <code>out</code> value.</li> <li>Where performance isn't a concern and the resulting code significantly more     readable (e.g. chained null conditional operators vs deeply nested if     statements) nullable structs are acceptable.</li> <li> <p>Notes:</p> <ul> <li>Nullable structs are convenient, but reinforce the general \u2018null is     failure\u2019 pattern Google prefers to avoid. We will investigate a     <code>StatusOr</code> equivalent in the future, if there is enough demand.</li> </ul> </li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#removing-from-containers-while-iterating","title":"Removing from containers while iterating","text":"<p>C# (like many other languages) does not provide an obvious mechanism for removing items from containers while iterating. There are a couple of options:</p> <ul> <li>If all that is required is to remove items that satisfy some condition,     <code>someList.RemoveAll(somePredicate)</code> is recommended.</li> <li>If other work needs to be done in the iteration, <code>RemoveAll</code> may not be     sufficient. A common alternative pattern is to create a new container     outside of the loop, insert items to keep in the new container, and swap the     original container with the new one at the end of iteration.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#calling-delegates","title":"Calling delegates","text":"<ul> <li>When calling a delegate, use <code>Invoke()</code> and use the null conditional     operator - e.g. <code>SomeDelegate?.Invoke()</code>. This clearly marks the call at the     callsite as \u2018a delegate that is being called\u2019. The null check is concise and     robust against threading race conditions.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#the-var-keyword","title":"The <code>var</code> keyword","text":"<ul> <li>Use of <code>var</code> is encouraged if it aids readability by avoiding type names     that are noisy, obvious, or unimportant.</li> <li> <p>Encouraged:</p> <ul> <li>When the type is obvious - e.g. <code>var apple = new Apple();</code>, or <code>var     request = Factory.Create&lt;HttpRequest&gt;();</code></li> <li>For transient variables that are only passed directly to other methods -     e.g. <code>var item = GetItem(); ProcessItem(item);</code></li> </ul> </li> <li> <p>Discouraged:</p> <ul> <li>When working with basic types - e.g. <code>var success = true;</code></li> <li>When working with compiler-resolved built-in numeric types - e.g. <code>var     number = 12 * ReturnsFloat();</code></li> <li>When users would clearly benefit from knowing the type - e.g. <code>var     listOfItems = GetList();</code></li> </ul> </li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#attributes","title":"Attributes","text":"<ul> <li>Attributes should appear on the line above the field, property, or method     they are associated with, separated from the member by a newline.</li> <li>Multiple attributes should be separated by newlines. This allows for easier     adding and removing of attributes, and ensures each attribute is easy to     search for.</li> </ul>"},{"location":"onboarding/3-csharp-google-styleguide/#argument-naming","title":"Argument Naming","text":"<p>Derived from the Google C++ style guide.</p> <p>When the meaning of a function argument is nonobvious, consider one of the following remedies:</p> <ul> <li>If the argument is a literal constant, and the same constant is used in     multiple function calls in a way that tacitly assumes they're the same, use     a named constant to make that constraint explicit, and to guarantee that it     holds.</li> <li>Consider changing the function signature to replace a <code>bool</code> argument with     an <code>enum</code> argument. This will make the argument values self-describing.</li> <li>Replace large or complex nested expressions with named variables.</li> <li>Consider using     Named Arguments     to clarify argument meanings at the call site.</li> <li>For functions that have several configuration options, consider defining a     single class or struct to hold all the options and pass an instance of that.     This approach has several advantages. Options are referenced by name at the     call site, which clarifies their meaning. It also reduces function argument     count, which makes function calls easier to read and write. As an added     benefit, call sites don't need to be changed when another option is added.</li> </ul> <p>Consider the following example:</p> <pre><code>// Bad - what are these arguments?\nDecimalNumber product = CalculateProduct(values, 7, false, null);\n</code></pre> <p>versus:</p> <pre><code>// Good\nProductOptions options = new ProductOptions();\noptions.PrecisionDecimals = 7;\noptions.UseCache = CacheUsage.DontUseCache;\nDecimalNumber product = CalculateProduct(values, options, completionDelegate: null);\n</code></pre>"}]}